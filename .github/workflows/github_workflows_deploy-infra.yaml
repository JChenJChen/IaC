name: Deploy AWS Infrastructure (Terraform)

on:
  push:
    branches:
      - main

env:
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY_PROD }}
  var_file: terraform.tfvars
  backend_file: main.tfbackend


jobs:
  deploy:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3


      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37.6.0

      - name: Terraform Plan on Changed Directories
        id: plan
        run: |
          DIRS_PROCESSED=()
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            DIRNAME=$(dirname "$file")
            PARENT_DIR=$(echo "$DIRNAME" | awk -F'/' '{print ($3 == "" ? ($2 == "" ? $1 : $1 "/" $2) : $1 "/" $2 "/" $3)}')
            if [[ " ${DIRS_PROCESSED[@]} " =~ " ${PARENT_DIR} " ]]; then
              continue
            fi
            if [[ "$file" == *".tf" || "$file" == *"/terraform.tfvars" ]]; then
              echo "Planning Terraform for $PARENT_DIR..."
              
              terraform -chdir="$PARENT_DIR" init -var-file=${{ env.var_file }} -backend-config=${{ env.backend_file }}
              terraform -chdir="$PARENT_DIR" plan -var-file=${{ env.var_file }} -out=tfplan.binary
              terraform -chdir="$PARENT_DIR" show -json tfplan.binary > tfplan.json
              terraform -chdir="$PARENT_DIR" show tfplan.binary
              DIRS_PROCESSED+=("$PARENT_DIR")
            else
              echo "Skipping $file as it's not a Terraform configuration file."
            fi
          done
      # - name: Upload Plan Artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: terraform-plans
      #     path: |
      #       **/tfplan.binary
      #       **/tfplan.json

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    # needs: manual-approval
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Setup GCP Service Account
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          service_account_key: ${{ secrets.GCP_SA_KEY_PROD }}
          export_default_credentials: true

      - name: Download Plan Artifacts
        uses: actions/download-artifact@v4
        with:
          name: terraform-plans

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37.6.0

      - name: Apply Terraform commands on changed directories
        run: |
          DIRS_PROCESSED=()
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            DIRNAME=$(dirname "$file")
            PARENT_DIR=$(echo "$DIRNAME" | awk -F'/' '{print ($3 == "" ? ($2 == "" ? $1 : $1 "/" $2) : $1 "/" $2 "/" $3)}')
            if [[ " ${DIRS_PROCESSED[@]} " =~ " ${PARENT_DIR} " ]]; then
              continue
            fi
            if [[ "$file" == *".tf" || "$file" == *"/terraform.tfvars" ]]; then
              echo "Applying Terraform for $PARENT_DIR..."
               
              terraform -chdir="$PARENT_DIR" init -var-file=${{ env.var_file }} -backend-config=${{ env.backend_file }}
              terraform -chdir="$PARENT_DIR" apply -auto-approve "tfplan.binary"
              DIRS_PROCESSED+=("$PARENT_DIR")
            else
              echo "Skipping $file as it's not a Terraform configuration file."
            fi
          done

      # - name: Terraform Init
      #   run: terraform init

      # - name: Terraform Plan
      #   run: terraform plan

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve